# -*- coding: utf-8 -*-
"""LAB 02_140.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dyTiKk6mJQkxutvtfZZZybDX_HhX3_Yj
"""



"""#ACTIVITY 01"""

# Accept two lists from user and display their join
list1 = input("Enter first list elements separated by spaces: ").split()
list2 = input("Enter second list elements separated by spaces: ").split()

# Join the two lists
joined_list = list1 + list2
print("Joined List:", joined_list)

"""#ACTIVITY 02

"""

# Function to check if a string is a palindrome
def is_palindrome(s):
    s = s.lower().replace(" ", "")  # Convert to lowercase and remove spaces
    return s == s[::-1]

# Take input from user
string = input("Enter a string: ")

# Check if palindrome
if is_palindrome(string):
    print("The given string is a palindrome.")
else:
    print("The given string is not a palindrome.")

"""#ACTIVITY 03

"""

# Matrix multiplication of two 3x3 matrices
a = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
b = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Initialize result matrix
c = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

# Perform multiplication
for i in range(len(a)):
    for j in range(len(b[0])):
        for k in range(len(b)):
            c[i][j] += a[i][k] * b[k][j]

# Print result
print("Resultant Matrix:")
for row in c:
    print(row)

"""#ACTIVITY 04

"""

import math

# Function to calculate distance between two points
def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

# Function to calculate perimeter of a polygon
def perimeter(polygon):
    perim = 0
    for i in range(len(polygon)):
        perim += distance(polygon[i], polygon[(i + 1) % len(polygon)])
    return perim

# Take input as list of tuples
n = int(input("Enter number of sides: "))
polygon = []
for i in range(n):
    x, y = map(float, input(f"Enter coordinates of point {i+1} (x y): ").split())
    polygon.append((x, y))

print("Perimeter of the polygon:", perimeter(polygon))

"""#ACTIVITY 05


"""

# Function to compute symmetric difference without using built-in functions
def symmetric_difference(setA, setB):
    return [item for item in setA if item not in setB] + [item for item in setB if item not in setA]

# Input sets from user
setA = set(map(int, input("Enter elements of first set separated by spaces: ").split()))
setB = set(map(int, input("Enter elements of second set separated by spaces: ").split()))

# Compute symmetric difference
setC = symmetric_difference(setA, setB)

print("Symmetric Difference (Custom Function):", setC)
print("Using Built-in Function:", setA.symmetric_difference(setB))
print("Using Operator (^):", setA ^ setB)

"""#ACTIVITY 06

"""

# Dictionary storing phone numbers
phone_book = {
    ("John", "Doe"): "123-456-7890",
    ("Jane", "Smith"): "987-654-3210",
    ("Alice", "Brown"): "555-555-5555"
}

# Take user input
first_name = input("Enter first name: ")
last_name = input("Enter last name: ")

# Search for number
phone_number = phone_book.get((first_name, last_name), "Not Found")

print(f"Phone Number: {phone_number}")

"""#LAB TASK 01

"""

list1 = list(map(int, input("Enter first list of numbers separated by spaces: ").split()))
list2 = list(map(int, input("Enter second list of numbers separated by spaces: ").split()))

# Merge and sort
merged_list = sorted(list1 + list2)

print("Sorted Merged List:", merged_list)

"""#LAB TASK 02"""

numbers = list(map(int, input("Enter list of numbers separated by spaces: ").split()))

# Find smallest and largest
smallest = min(numbers)
largest = max(numbers)

print("Smallest Number:", smallest)
print("Largest Number:", largest)

"""#LAB TASK 03

"""

import math

# Function to approximate derivative
def derivative(f, x, h=0.001):
    return (f(x + h) - f(x)) / h

# Define function f(x) = sin(x)
def f(x):
    return math.sin(x)

# Compute derivative for values of x from -pi to pi
x_values = [x * 0.001 for x in range(int(-math.pi * 1000), int(math.pi * 1000))]
for x in x_values:
    print(f"x = {x:.3f}, Approximated f'(x) = {derivative(f, x):.6f}, Exact cos(x) = {math.cos(x):.6f}")

"""#LAB TASK 04"""

# Dictionary of birthdays
birthdays = {
    "Albert Einstein": "03/14/1879",
    "Benjamin Franklin": "01/17/1706",
    "Ada Lovelace": "12/10/1815"
}

print("Welcome to the birthday dictionary. We know the birthdays of:")
for name in birthdays:
    print(name)

# Take input
name = input("Who's birthday do you want to look up? ")

# Display birthday
print(f"{name}'s birthday is {birthdays.get(name, 'Not Found')}.")

"""#LAB TASK 05

"""

# Given dictionary
sample_dict = {
    "name": "Kelly",
    "age": 25,
    "salary": 8000,
    "city": "New York"
}

# Keys to extract
keys = ["name", "salary"]

# Extract dictionary
new_dict = {k: sample_dict[k] for k in keys}

print("Extracted Dictionary:", new_dict)